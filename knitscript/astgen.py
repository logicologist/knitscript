from functools import singledispatch

from knitscript.astnodes import Expr, StitchExpr, RowExpr, PatternExpr
from knitscript.parser.KnitScriptParser import KnitScriptParser, \
    ParserRuleContext
from knitscript.stitch import Stitch


@singledispatch
def build_ast(ctx: ParserRuleContext) -> Expr:
    """
    Builds an AST from a parse tree generated by ANTLR.

    :param ctx: a parse tree context node
    :return: the AST corresponding to the parse tree
    """
    raise TypeError(f"unsupported parser context {type(ctx).__name__}")


@build_ast.register
def _(stitch: KnitScriptParser.StitchContext) -> Expr:
    return StitchExpr(Stitch.from_symbol(stitch.symbol.text))


@build_ast.register
def _(row: KnitScriptParser.RowContext) -> Expr:
    return RowExpr(list(map(build_ast, row.stitches)))


@build_ast.register
def _(pattern: KnitScriptParser.PatternContext) -> Expr:
    return PatternExpr(list(map(build_ast, pattern.rows)))
